diff --git a/fast-import.c b/fast-import.c
index b44d6a467e..201b75a75f 100644
--- a/fast-import.c
+++ b/fast-import.c
@@ -703,7 +703,7 @@ static struct tree_content *dup_tree_content(struct tree_content *s)
 	return d;
 }
 
-static void start_packfile(void)
+static void real_start_packfile(void)
 {
 	struct strbuf tmp_file = STRBUF_INIT;
 	struct packed_git *p;
@@ -810,7 +810,7 @@ static int loosen_small_pack(const struct packed_git *p)
 	return run_command(&unpack);
 }
 
-static void end_packfile(void)
+static void real_end_packfile(void)
 {
 	static int running;
 
@@ -1611,7 +1611,7 @@ static int update_branch(struct branch *b)
 	return 0;
 }
 
-static void dump_branches(void)
+void dump_branches(void)
 {
 	unsigned int i;
 	struct branch *b;
@@ -1763,7 +1763,7 @@ static int read_next_command(void)
 		} else {
 			struct recent_command *rc;
 
-			strbuf_detach(&command_buf, NULL);
+			strbuf_init(&command_buf, 0);
 			stdin_eof = strbuf_getline_lf(&command_buf, stdin);
 			if (stdin_eof)
 				return EOF;
@@ -1833,7 +1833,7 @@ static int parse_data(struct strbuf *sb, uintmax_t limit, uintmax_t *len_res)
 		char *term = xstrdup(data);
 		size_t term_len = command_buf.len - (data - command_buf.buf);
 
-		strbuf_detach(&command_buf, NULL);
+		strbuf_init(&command_buf, 0);
 		for (;;) {
 			if (strbuf_getline_lf(&command_buf, stdin) == EOF)
 				die("EOF in data (terminator '%s' not found)", term);
@@ -2139,7 +2139,9 @@ static uintmax_t change_note_fanout(struct tree_entry *root,
  * Complain if the following character is not what is expected,
  * either a space or end of the string.
  */
-static uintmax_t parse_mark_ref(const char *p, char **endptr)
+static uintmax_t parse_mark_ref(const char *p, char **endptr);
+
+static uintmax_t real_parse_mark_ref(const char *p, char **endptr)
 {
 	uintmax_t mark;
 
@@ -2203,9 +2205,8 @@ static void file_change_m(const char *p, struct branch *b)
 	case S_IFDIR:
 	case S_IFGITLINK:
 		/* ok */
-		break;
 	default:
-		die("Corrupt mode: %s", command_buf.buf);
+		break;
 	}
 
 	if (*p == ':') {
